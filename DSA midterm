
// nodelist

class Node {
    String data;
    Node next;

    Node(String data) {
        this.data = data;
        this.next = null;
    }
}

class NodeList {
    private Node last;
    private int counter;

    public NodeList() {
        last = null;
        counter = 0;
    }

    public boolean isEmpty() {
        return counter == 0;
    }

    public boolean add(Node item) {
        if (isEmpty()) {
            last = item;
            last.next = last;
        } else {
            item.next = last.next;
            last.next = item;
        }
        last = item;
        counter++;
        return true;
    }

    public boolean delete(int location) {
        if (isEmpty() || location < 0 || location >= counter) {
            return false;
        }

        Node current = last.next;
        Node previous = last;

        for (int i = 0; i < location; i++) {
            previous = current;
            current = current.next;
        }

        if (current == last) {
            if (counter == 1) {
                last = null;
            } else {
                previous.next = last.next;
                last = previous;
            }
        } else {
            previous.next = current.next;
            if (current == last.next) {
                last.next = previous.next;
            }
        }

        counter--;
        return true;
    }

    public void display() {
        if (isEmpty()) {
            System.out.println("List is empty!");
            return;
        }

        Node current = last.next;
        do {
            System.out.print(current.data + " ");
            current = current.next;
        } while (current != last.next);
        System.out.println();
    }
}

public class Main {
    public static void main(String[] args) {
        NodeList nodeList = new NodeList();

        nodeList.add(new Node("[Joshua]"));
        nodeList.add(new Node("[Jude]"));
        nodeList.add(new Node("[Keith]"));
        System.out.print("\nList of adding nodes: ");
        nodeList.display();

        nodeList.delete(1);
        System.out.print("\nDeleting node at index 1: ");
        nodeList.display();

        nodeList.delete(0);
        nodeList.delete(0);
        System.out.print("\nAll nodes deleted: ");
        nodeList.display();
    }
}



// stacklist
public class StackList 
{
   private StackNode top;
   private int count;
   
   public StackList()
   {
      top = null;
      count = 0;
   }
   
   private boolean isEmpty()
   {
      //return top == null;
      return count == 0;
   }
   
   public boolean push(String data)
   {
      StackNode node = new StackNode(data);
      node.tail = top;
      top = node;
      count++;
      return true;
   }
   
   public boolean pop()
   {
      if(!isEmpty())
      {
         top = top.tail;
         count--;
         return true;
      }
      return false;
   }
   
   public String peek()
   {
      if(!isEmpty())
      {
         return top.data;
      }
      return null;
   }
   
   public int getcount()
   {
      return count;
   }
   
   public void display()
   {
      if(!isEmpty())
      {
         StackNode temporary = top;
         while(temporary != null)
         {
            System.out.println(temporary.data);
            temporary = temporary.tail;
         }
         System.out.println();
      }
      else 
      {
         System.out.println("Stack is empty....");
      }
   }
   
   
   public static void main(String[] args)
   {
      StackList sl = new StackList();
      sl.push("java");
      sl.push("ccs");
      sl.push("uc");
      sl.push("it");
      sl.display();
      sl.push("cs");
      sl.display();
      sl.pop();
      sl.pop();
      sl.display();
      sl.push("c++");
      sl.display();
   }
   
}




// class Node {
    String data;  // Data held by the node
    Node next;    // Pointer to the next node in the list

    // Constructor to initialize the node with data
    Node(String data) {
        this.data = data;
        this.next = null;  // Initially, the next is set to null
    }
}

class LinkedList {
    private Node head;  // Head refers to the first node in the list

    public LinkedList() {
        head = null;  // Initially, the list is empty
    }

    // Method to add a node at the end of the list
    public void add(String data) {
        Node newNode = new Node(data);
        if (head == null) {
            head = newNode;  // If the list is empty, the new node becomes the head
        } else {
            Node temp = head;
            while (temp.next != null) {
                temp = temp.next;  // Traverse to the last node
            }
            temp.next = newNode;  // Add the new node at the end
        }
    }

    // Method to display the linked list
    public void display() {
        if (head == null) {
            System.out.println("List is empty");
            return;
        }
        Node temp = head;
        while (temp != null) {
            System.out.print(temp.data + " -> ");
            temp = temp.next;  // Move to the next node
        }
        System.out.println("null");
    }
}

public class Main {
    public static void main(String[] args) {
        LinkedList list = new LinkedList();
        list.add("Node 1");
        list.add("Node 2");
        list.add("Node 3");
        System.out.print("Linked List: ");
        list.display();
    }
}

