
// nodelist or listnode

class Node {
    String data;
    Node next;

    Node(String data) {
        this.data = data;
        this.next = null;
    }
}

class NodeList {
    private Node last;
    private int counter;

    public NodeList() {
        last = null;
        counter = 0;
    }

    public boolean isEmpty() {
        return counter == 0;
    }

    public boolean add(Node item) {
        if (isEmpty()) {
            last = item;
            last.next = last;
        } else {
            item.next = last.next;
            last.next = item;
        }
        last = item;
        counter++;
        return true;
    }

    public boolean delete(int location) {
        if (isEmpty() || location < 0 || location >= counter) {
            return false;
        }

        Node current = last.next;
        Node previous = last;

        for (int i = 0; i < location; i++) {
            previous = current;
            current = current.next;
        }

        if (current == last) {
            if (counter == 1) {
                last = null;
            } else {
                previous.next = last.next;
                last = previous;
            }
        } else {
            previous.next = current.next;
            if (current == last.next) {
                last.next = previous.next;
            }
        }

        counter--;
        return true;
    }

    public void display() {
        if (isEmpty()) {
            System.out.println("List is empty!");
            return;
        }

        Node current = last.next;
        do {
            System.out.print(current.data + " ");
            current = current.next;
        } while (current != last.next);
        System.out.println();
    }
}

public class Main {
    public static void main(String[] args) {
        NodeList nodeList = new NodeList();

        nodeList.add(new Node("[Joshua]"));
        nodeList.add(new Node("[Jude]"));
        nodeList.add(new Node("[Keith]"));
        System.out.print("\nList of adding nodes: ");
        nodeList.display();

        nodeList.delete(1);
        System.out.print("\nDeleting node at index 1: ");
        nodeList.display();

        nodeList.delete(0);
        nodeList.delete(0);
        System.out.print("\nAll nodes deleted: ");
        nodeList.display();
    }
}



// stacklist
class StackNode {
    String data;
    StackNode next;

    StackNode(String data) {
        this.data = data;
        this.next = null;
    }
}

class StackList {
    private StackNode top;
    private int count;

    public StackList() {
        top = null;
        count = 0;
    }

    private boolean isEmpty() {
        return count == 0;
    }

    public boolean push(String data) {
        StackNode node = new StackNode(data);
        node.next = top;
        top = node;
        count++;
        return true;
    }

    public boolean pop() {
        if (!isEmpty()) {
            top = top.next;
            count--;
            return true;
        }
        return false;
    }

    public String peek() {
        if (!isEmpty()) {
            return top.data;
        }
        return null;
    }

    public int getCount() {
        return count;
    }

    public void display() {
        if (!isEmpty()) {
            StackNode temporary = top;
            while (temporary != null) {
                System.out.println(temporary.data);
                temporary = temporary.next;
            }
            System.out.println();
        } else {
            System.out.println("Stack is empty....");
        }
    }
}

public class Main {
    public static void main(String[] args) {
        StackList sl = new StackList();
        sl.push("java");
        sl.push("ccs");
        sl.push("uc");
        sl.push("it");
        sl.display();
        sl.push("cs");
        sl.display();
        sl.pop();
        sl.pop();
        sl.display();
        sl.push("c++");
        sl.display();
    }
}

   



// stacknode

class StackNode {
    int value;         
    StackNode next;    


    StackNode(int value) {
        this.value = value;
        this.next = null; 
    }
}

class Stack {
    private StackNode top; 

    public Stack() {
        this.top = null; // Initially, the stack is empty
    }

    public void push(int value) {
        StackNode newNode = new StackNode(value);
        newNode.next = top; 
        top = newNode;     
    }

    // Method to pop a value from the stack
    public int pop() {
        if (isEmpty()) {
            throw new RuntimeException("Stack is empty");
        }
        int poppedValue = top.value; // Get the value to return
        top = top.next;               // Update the top to the next node
        return poppedValue;           // Return the popped value
    }

  
    public int peek() {
        if (isEmpty()) {
            throw new RuntimeException("Stack is empty"); 
        }
        return top.value; // Return the value of the top node
    }


    public boolean isEmpty() {
        return top == null; // Returns true if the stack is empty
    }
}

 public class Main {
     
     public static void main(String[] args) {
         
        Stack stack = new Stack();
        stack.push(10);
        stack.push(20);
        stack.push(30);
        
        System.out.println("Top element: " + stack.peek()); 
        
        System.out.println("Popped element: " + stack.pop()); 
        System.out.println("Popped element: " + stack.pop()); 
        
        System.out.println("Is stack empty? " + stack.isEmpty()); 
        
        System.out.println("Popped element: " + stack.pop()); 
        System.out.println("Is stack empty? " + stack.isEmpty()); 
    }
     
 }
    



