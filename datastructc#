using System;

public class MergeSort
{

    static void Merge(int[] array, int left, int mid, int right)
    {

        int n1 = mid - left + 1;
        int n2 = right - mid;


        int[] leftArray = new int[n1];
        int[] rightArray = new int[n2];

        for (int i = 0; i < n1; i++)
        {
            leftArray[i] = array[left + i];
        }
        for (int j = 0; j < n2; j++)
        {
            rightArray[j] = array[mid + 1 + j];
        }
        
        int lIndex = 0, rIndex = 0;
        int jIndex = left;

        while (lIndex < n1 && rIndex < n2)
        {
            if (leftArray[lIndex] <= rightArray[rIndex])
            {
                array[jIndex] = leftArray[lIndex];
                lIndex++;
            }
            else
            {
                array[jIndex] = rightArray[rIndex];
                rIndex++;
            }
            jIndex++;
        }

        while (lIndex < n1)
        {
            array[jIndex] = leftArray[lIndex];
            lIndex++;
            jIndex++;
        }

        while (rIndex < n2)
        {
            array[jIndex] = rightArray[rIndex];
            rIndex++;
            jIndex++;
        }
    }

    static void MergeSort(int[] array, int left, int right)
    {
        if (left < right)
        {

            int mid = left + (right - left) / 2;

            Mergest(array, left, mid);
            Mergesrt(array, mid + 1, right);

            Merge(array, left, mid, right);
        }
    }

    public static void Main(string[] args)
    {
        int[] array = { 7, 10, 89, 11, 91 };
        Console.WriteLine("Original Array:");
        PrintArray(array);

        MergeSortAlgorithm(array, 0, array.Length - 1);

        Console.WriteLine("Sorted Array:");
        PrintArray(array);
    }

    static void PrintArray(int[] array)
    {
        foreach (var value in array)
        {
            Console.Write(value + " ");
        }
    }
}
